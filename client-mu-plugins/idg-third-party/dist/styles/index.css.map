{"version":3,"sources":["webpack:///vendors/gpt.scss","webpack:///../../../../node_modules/sass-mq/_mq.scss","webpack:///vendors/outbrain.scss","webpack:///vendors/sourcepoint.scss"],"names":[],"mappings":";AACA,WACE,iBAAkB,CACnB,2EAIC,8DAA+D,CAC/D,iEAAkE,CAClE,eAAgB,CACjB,IAIC,SAAU,CACV,iBAAkB,CAClB,QAAW,CACX,kCAA2B,CAA3B,0BAA2B,CAC3B,qBAAsB,CACtB,obAAkG,CACnG,iBAGC,kBAAmB,CACnB,WAAY,CACb,eAGC,+BAAyB,CAAzB,uBAAyB,CACzB,SAAU,CACX,SAGC,iBAAkB,CAClB,iBAAkB,CACnB,yCAGC,mBACE,iCAA2B,CAA3B,yBAA2B,CAC3B,KAAM,CACN,SAAU,CACX,qBAGC,SAAU,CACX,CAGH,sDAEE,gBAAiB,CAClB,sBAGC,uBAAwB,CACxB,iBAAkB,CAClB,aAAc,CACd,wBAAyB,CACzB,iBAAe,CACf,QAAS,CACT,QAAS,CACT,6DAA2B,CAC5B,WAIC,aAAc,CACd,WAAY,CACZ,oCAA0C,CAC1C,2DAA0B,CAC3B,iBAGC,4BAA6B,CAC7B,6BAA8B,CAC9B,kBAAmB,CACpB,eAIC,YAAa,CACb,QAAS,CC+JH,2BDjKR,eAKI,YAAa,CAEhB,CAED,0BACE,QAAS,CACV,YAIC,kBAAmB,CACnB,iEAAkE,CAClE,mBAAoB,CACpB,UAAW,CACX,UAAW,CACZ,yBAGC,8DAA+D,CAC/D,UAAW,CCyIL,2BD3IR,yBAMI,iBAAkB,CAClB,kBAAmB,CAEtB,CAED,8CACE,OAAQ,CACT,WAKC,WAAY,CACZ,kBAAmB,CACpB,sBEzHC,gBAAiB,CACjB,cAAe,CACf,gBAAwB,CACzB,oEAGC,mBAAqB,CACtB,YCPC,2BAAuB,CAAvB,sBAAuB,CACvB,iBAAkB,CAClB,eAAgB,CAChB,UAAW,CACX,cAAe,CACf,YAAa,CACb,qBAAsB,CACtB,WAAY,CACZ,cAAe,C","file":"../styles/index.css","sourcesContent":["/* Ad specific site modifications */\n.site-main {\n  position: relative;\n}\n\n.ad-banner.has-loaded + .site-main,\n.ad-banner.has-loaded + .layout--right-rail {\n  border-top: 1px solid var(--navigation-secondary--border-color);\n  border-bottom: 1px solid var(--navigation-secondary--border-color);\n  margin-top: 15px;\n}\n\n/* Global ad styles */\n.ad {\n  opacity: 0;\n  visibility: hidden;\n  height: 0px;\n  transform: translateY(-10%);\n  will-change: transform; // Give the browser a heads up.\n  transition: transform .4s cubic-bezier(.77, 0, .175, 1), opacity .5s cubic-bezier(.77, 0, .175, 1);\n}\n\n.ad.has-rendered {\n  visibility: visible;\n  height: auto;\n}\n\n.ad.has-loaded {\n  transform: translateY(0%);\n  opacity: 1;\n}\n\n.page-ad {\n  position: relative;\n  text-align: center;\n}\n\n@media only screen and (min-width: 728px) {\n  .page-ad.is-sticky {\n    position: sticky !important;\n    top: 0; // This is handled in JS.\n    z-index: 1;\n  }\n\n  .ad-banner.is-sticky {\n    z-index: 2;\n  }\n}\n\n.has-ad-prefix.has-rendered,\n.has-ad-prefix.has-loaded {\n  padding-top: 34px;\n}\n\n.has-ad-prefix::before {\n  content: \"advertisement\";\n  position: absolute;\n  color: #878787;\n  text-transform: uppercase;\n  font-size: 10px;\n  top: 12px;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/* Banner ad */\n.ad-banner {\n  margin: 0 auto;\n  width: 100vw;\n  background-color: rgba(255, 255, 255, .85);\n  backdrop-filter: blur(6px);\n}\n\n.home .ad-banner {\n  margin-left: calc(50% - 50vw);\n  margin-right: calc(50% - 50vw);\n  margin-bottom: 34px;\n}\n\n/* Right rail ad */\n.ad-right-rail {\n  height: 600px; // Default to enable lazy load.\n  top: 15px; // Overided if sticky behaviour kicks in.\n\n  @include mq($until: tablet) {\n    display: none;\n  }\n}\n\n.admin-bar .ad-right-rail {\n  top: 47px; // Overided if sticky behaviour kicks in.\n}\n\n/* Article ad */\n.ad-article {\n  margin-bottom: 24px;\n  border-bottom: 1px solid var(--navigation-secondary--border-color);\n  padding-bottom: 24px;\n  clear: both;\n  width: 100%;\n}\n\n.single-post .ad-article {\n  border-top: 1px solid var(--navigation-secondary--border-color);\n  width: auto;\n\n  @include mq(\"tablet\") {\n    // Stretch to edges of .entry-content\n    margin-left: -50px;\n    margin-right: -50px;\n  }\n}\n\n.single-post .ad-article.has-ad-prefix::before {\n  top: 4px;\n}\n\n/* Footer ad */\n.ad-footer {\n  margin: 0 auto;\n  width: 100vw;\n  margin-bottom: 15px;\n}\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n///\n/// Do not override this value, or things will break\n///\n/// @link https://github.com/sass-mq/sass-mq/issues/122\n/// @deprecated This setting will be removed in sass-mq v6.0.0\n/// @access private\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (such as the layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $mq-show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @ignore @param {Number} $base-font-size [$mq-base-font-size] - `<body>` font size (deprecated)\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if ($mq-base-font-size != 16px) {\n        @warn \"Overriding $mq-base-font-size will break things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if ($base-font-size != 16px) {\n        @warn \"The $base-font-size argument will be removed in sass-mq v6.0.0, as overriding it breaks things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $until [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$mq-media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$mq-breakpoints]\n/// @ignore @param {String} $static-breakpoint [$mq-static-breakpoint]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$mq-show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$mq-breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n",".ob-smartfeed-wrapper {\n  margin: 20px auto;\n  padding: 0 20px;\n  max-width: 1200px + 40px; // Adds left & right padding\n}\n\n.SFD_STP_1.ob-widget .ob-rec-image-container .ob-rec-logo-container {\n  z-index: 1 !important;\n}\n",".cmp button {\n  text-align-last: center;\n  font-size: .875rem;\n  font-weight: 700;\n  color: #fff;\n  background: 0 0;\n  padding: 10px;\n  border: 1px solid #aaa;\n  height: 45px;\n  cursor: pointer;\n}\n"],"sourceRoot":""}