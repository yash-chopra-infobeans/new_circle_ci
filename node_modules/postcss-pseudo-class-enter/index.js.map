{"version":3,"file":"index.js","sources":["src/index.js"],"sourcesContent":["import postcss from 'postcss';\nimport parser from 'postcss-selector-parser';\n\nexport default postcss.plugin('postcss-pseudo-class-enter', opts => {\n\t// add conditional prefix\n\tconst pseudoClass = `:${Object(opts).prefix ? `-${opts.prefix}-` : ''}enter`;\n\tconst pseudoClassRegExp = new RegExp(pseudoClass, 'i');\n\n\t// add outline declaration\n\tconst shouldUseOutline = Object(opts).outline !== null && Object(opts).outline !== undefined;\n\n\treturn root => {\n\t\t// transform :enter selectors to :focus and :hover\n\t\troot.walkRules(pseudoClassRegExp, rule => {\n\t\t\tconst originalSelector = rule.selector;\n\n\t\t\tconst modifiedSelector = parser(selectors => {\n\t\t\t\ttransform(selectors, pseudoClass);\n\t\t\t}).processSync(originalSelector);\n\n\t\t\tif (originalSelector !== modifiedSelector) {\n\t\t\t\trule.selector = modifiedSelector;\n\t\t\t}\n\n\t\t\tif (shouldUseOutline) {\n\t\t\t\t// check for an existing outline declaration\n\t\t\t\tconst hasOutline = rule.nodes.some(decl => decl.prop === 'outline');\n\n\t\t\t\t// if an outline declaration does not exist, prepend it\n\t\t\t\tif (!hasOutline) {\n\t\t\t\t\tconst outlineValue = !opts.outline || opts.outline === true ? 0 : opts.outline;\n\n\t\t\t\t\trule.prepend({ prop: 'outline', value: outlineValue });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n});\n\nfunction transform(selectors, pseudoClass) {\n\tselectors.walk(selector => {\n\t\tif (selector.type === 'pseudo' && selector.value === pseudoClass) {\n\t\t\t// patch :hover pseudo\n\t\t\tselector.value = ':hover';\n\n\t\t\tconst selectorsClone = selectors.clone().empty();\n\t\t\tconst selectorParentClone = selector.parent.clone();\n\t\t\tselectorsClone.append(selectorParentClone);\n\n\t\t\ttransform(selectorsClone, pseudoClass);\n\n\t\t\tselectors.insertBefore(selector, selectorParentClone);\n\n\t\t\t// patch :focus pseudo\n\t\t\tselector.value = ':focus';\n\t\t}\n\t});\n}\n"],"names":["postcss","plugin","opts","pseudoClass","Object","prefix","pseudoClassRegExp","RegExp","shouldUseOutline","outline","undefined","root","walkRules","rule","originalSelector","selector","modifiedSelector","parser","selectors","transform","processSync","hasOutline","nodes","some","decl","prop","outlineValue","prepend","value","walk","type","selectorsClone","clone","empty","selectorParentClone","parent","append","insertBefore"],"mappings":";;;;;;;AAGA,YAAeA,OAAO,CAACC,MAAR,CAAe,4BAAf,EAA6CC,IAAI,IAAI;;QAE7DC,WAAW,GAAI,IAAGC,MAAM,CAACF,IAAD,CAAN,CAAaG,MAAb,GAAuB,IAAGH,IAAI,CAACG,MAAO,GAAtC,GAA2C,EAAG,OAAtE;QACMC,iBAAiB,GAAG,IAAIC,MAAJ,CAAWJ,WAAX,EAAwB,GAAxB,CAA1B,CAHmE;;QAM7DK,gBAAgB,GAAGJ,MAAM,CAACF,IAAD,CAAN,CAAaO,OAAb,KAAyB,IAAzB,IAAiCL,MAAM,CAACF,IAAD,CAAN,CAAaO,OAAb,KAAyBC,SAAnF;SAEOC,IAAI,IAAI;;IAEdA,IAAI,CAACC,SAAL,CAAeN,iBAAf,EAAkCO,IAAI,IAAI;YACnCC,gBAAgB,GAAGD,IAAI,CAACE,QAA9B;YAEMC,gBAAgB,GAAGC,MAAM,CAACC,SAAS,IAAI;QAC5CC,SAAS,CAACD,SAAD,EAAYf,WAAZ,CAAT;OAD8B,CAAN,CAEtBiB,WAFsB,CAEVN,gBAFU,CAAzB;;UAIIA,gBAAgB,KAAKE,gBAAzB,EAA2C;QAC1CH,IAAI,CAACE,QAAL,GAAgBC,gBAAhB;;;UAGGR,gBAAJ,EAAsB;;cAEfa,UAAU,GAAGR,IAAI,CAACS,KAAL,CAAWC,IAAX,CAAgBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,SAAtC,CAAnB,CAFqB;;YAKjB,CAACJ,UAAL,EAAiB;gBACVK,YAAY,GAAG,CAACxB,IAAI,CAACO,OAAN,IAAiBP,IAAI,CAACO,OAAL,KAAiB,IAAlC,GAAyC,CAAzC,GAA6CP,IAAI,CAACO,OAAvE;UAEAI,IAAI,CAACc,OAAL,CAAa;YAAEF,IAAI,EAAE,SAAR;YAAmBG,KAAK,EAAEF;WAAvC;;;KAnBH;GAFD;CARc,CAAf;;AAoCA,SAASP,SAAT,CAAmBD,SAAnB,EAA8Bf,WAA9B,EAA2C;EAC1Ce,SAAS,CAACW,IAAV,CAAed,QAAQ,IAAI;QACtBA,QAAQ,CAACe,IAAT,KAAkB,QAAlB,IAA8Bf,QAAQ,CAACa,KAAT,KAAmBzB,WAArD,EAAkE;;MAEjEY,QAAQ,CAACa,KAAT,GAAiB,QAAjB;YAEMG,cAAc,GAAGb,SAAS,CAACc,KAAV,GAAkBC,KAAlB,EAAvB;YACMC,mBAAmB,GAAGnB,QAAQ,CAACoB,MAAT,CAAgBH,KAAhB,EAA5B;MACAD,cAAc,CAACK,MAAf,CAAsBF,mBAAtB;MAEAf,SAAS,CAACY,cAAD,EAAiB5B,WAAjB,CAAT;MAEAe,SAAS,CAACmB,YAAV,CAAuBtB,QAAvB,EAAiCmB,mBAAjC,EAViE;;MAajEnB,QAAQ,CAACa,KAAT,GAAiB,QAAjB;;GAdF;;;;;"}